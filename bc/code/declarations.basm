;
                .org 0x0000
;MAIN ENTRYPOINT
                cal :FMAIN0001
                kil
;FUNCTIONS
;FUNCTION main
FMAIN0001:      nop
                .mv dsdi, :sys_stackhead
                mov cs, 0x00
                mov ci, 0x00
                cal :add16
                mov ds,cs
                mov di,ci
                cal :peek16
                psh cs
                psh ci
                mov cs, 0x00
                mov ci, 0x05
                pop di
                pop ds
                cal :poke16
                .mv dsdi, :sys_stackhead
                mov cs, 0x00
                mov ci, 0x02
                cal :add16
                mov ds,cs
                mov di,ci
                cal :peek16
                psh cs
                psh ci
                mov cs, 0x00
                mov ci, 0x04
                psh cs
                psh ci
                mov cs, 0x00
                mov ci, 0x02
                pop di
                pop ds
                cal :sub16
                pop di
                pop ds
                mov #dsdi, ci
                .mv dsdi,:sys_stackhead
                mov cs, 0x00
                mov ci, 0x00
                cal :add16
                mov ds, cs
                mov di, ci
                cal :peek16
                mov a, cs
                or ci
                .mv csci, :LABEL0002
                jmp z, csci
                .mv dsdi, :sys_stackhead
                mov cs, 0x00
                mov ci, 0x03
                cal :sub16
                mov ds,cs
                mov di,ci
                cal :peek16
                psh cs
                psh ci
                .mv dsdi,:sys_stackhead
                mov cs, 0x00
                mov ci, 0x01
                cal :sub16
                mov ds, cs
                mov di, ci
                cal :peek16
                pop di
                pop ds
                cal :poke16
LABEL0002:      nop
LABEL0003:      nop
                .mv dsdi,:sys_stackhead
                mov cs, 0x00
                mov ci, 0x01
                cal :sub16
                mov ds, cs
                mov di, ci
                cal :peek16
                mov a, cs
                or ci
                .mv csci, :LABEL0004
                jmp z, csci
                .mv dsdi, :sys_stackhead
                mov cs, 0x00
                mov ci, 0x04
                cal :sub16
                mov ds,cs
                mov di,ci
                cal :peek16
                psh cs
                psh ci
                .mv dsdi,:sys_stackhead
                mov cs, 0x00
                mov ci, 0x07
                cal :sub16
                mov ds, cs
                mov di, ci
                cal :peek16
                psh cs
                psh ci
                mov cs, 0x00
                mov ci, 0x01
                pop di
                pop ds
                cal :sub16
                pop di
                pop ds
                mov #dsdi, ci
                .mv csci, :LABEL0003
                xor a
                jmp z, csci
LABEL0004:      nop
                nop
                xor a
;END OF FUNCTION main
;>>>>>>>>>>COMPILER ASM LIB<<<<<<<<<<<<<
               mov a, 0xff
               cal :fatal
;=============
; PRINTHEX4(a) - prints hex number from 0 to f
; IN:    a - number to print
; OUT:   a - unchanged      10 -> 0 -> 41
;       cs - set to 1
printhex4:     mov cs, 0x01
               psh a
               sub 0x0a
               jmr no, :printhex4_af
printhex4_09:  pop a
               add 0x30
               out #cs, a
               ret
printhex4_af:  pop a
               add 0x37
               out #cs, a
               ret
;=============
; PRINTHEX8(a) - prints hex number 
; IN:    a - number to print
; OUT:   a - set to lower half
;     csci - unchanged
;     dsdi - unchanged
printhex8:     psh cs
               psh ci
               mov ci, a
               shr 0x04
               cal :printhex4
               mov a, ci
               and 0x0f
               cal :printhex4
               pop ci
               pop cs
               ret
;=============
; PRINTHEX16(csci) - prints hex number 4 digits
; IN:    csci - hex number 4 digits
; OUT:   csci - unchanged
;           a - ci
printhex16:    mov a, cs
               psh ci
               cal :printhex8
               pop a
               cal :printhex8
               ret
;=============
; INC16(dsdi) - increase 16bit number correctly
; IN:    dsdi - number 16bit, break if exceeds 16bit
; OUT:   dsdi - add 1
;           a - di + 1 or ds + 1
inc16:         mov a, di
               inc a
               mov di, a
               jmr c, :inc16_carry
               ret
inc16_carry:   mov a, ds
               inc a
               mov ds, a
               jmr c, :inc16_fail
inc16_ret:     ret
inc16_fail:    mov a, 0x10
               cal :fatal
;=============
; DEC16(dsdi) - decrease 16bit number correctly
; IN:    dsdi - number 16bit, break if lower than 0
; OUT:   dsdi - sub 1
;           a - di - 1 or ds - 1
dec16:         mov a, di
               dec a
               mov di, a
               jmr o, :dec16_ovfl
               ret
dec16_ovfl:    mov a, ds
               dec a
               mov ds, a
               jmr o, :dec16_fail
dec16_ret:     ret
dec16_fail:    mov a, 0x11
               cal :fatal
;=============
; POKE16(#dsdi, csci) - stores csci value under #dsdi address (2 bytes)
; IN:   dsdi - address to store
;       csci - value to store
; OUT:  dsdi - address to store + 1
;       csci - unchanged
;       a    - rubbish
poke16:        mov #dsdi, cs
               cal :inc16
               mov #dsdi, ci
poke16_ok:     ret             
;=============
; PEEK16(#dsdi) - returns value under dsdi address (2 bytes)
; IN:   dsdi - address to read
; OUT:  dsdi - address to read + 1
;       csci - value
;       a    - rubbish
peek16:        mov cs, #dsdi
               cal :inc16
               mov ci, #dsdi
peek16_ok:     ret
;=============
; ADD16(csci,dsdi) - returns value under csci address (2 bytes) 
;                    return os error 0x10 in case of overflow                
; IN:   csci - argument 1
;       dsdi - argument 2
; OUT:  csci - sum of csci and dsdi
;       a    - rubbish
add16:         mov a, ci
               add di
               mov ci, a
               jmr c, :add16_carry1
               mov a, cs
add16_cry_nxt: add ds
               mov cs, a
               jmr c, :add16_cry2err
add16_ok:      ret
add16_carry1:  mov a, cs
               inc a
               jmr nc, :add16_cry_nxt
add16_cry2err: mov a, 0x12
               cal :fatal
;=============
; SUB16(csci,dsdi) - returns value under csci address (2 bytes) 
;                    return os error 0x11 in case of overflow                
; IN:   csci - argument 1
;       dsdi - argument 2
; OUT:  csci - substracts dsdi from csci
;       a    - rubbish
sub16:         mov a, ci
               sub di
               mov ci, a
               jmr o, :sub16_ovr1
               mov a, cs
sub16_crynxt:  sub ds
               mov cs, a
               jmr o, :sub16_ovr2err
sub16_ok:      ret
sub16_ovr1:    mov a, cs
               dec a
               jmr no, :sub16_crynxt
sub16_ovr2err: mov a, 0x13
               cal :fatal
;=============
; PRINT_NEWLINE - prints new line
; IN:
; OUT:   a - rubbish
print_newline: psh cs
               mov cs, 0x01
               mov a, 0x0a
               out #cs, a
               mov a, 0x0d
               out #cs, a
               pop cs
               ret
;=============
; PRINTSTR(*dsdi) - sends chars to printer
; IN: dsdi - address of 0-ended char table
; OUT:   a - set to 0x00
;       ci - set to 0x01
;     dsdi - set to end of char table
printstr:      mov ci, 0x01
printstr_loop: mov a, #dsdi
               jmr z, :printstr_end
               out #ci, a
               cal :inc16
               xor a
               jmr z, :printstr_loop
printstr_end:  ret
;=============
; FATAL(a) - prints error message and stops
; IN:   a - error code
;   stack - as error address
; OUT:  KILL, messed stack
;
fatal:         psh a
               cal :print_newline
               .mv dsdi, :data_fatal
               cal :printstr
               pop a
               cal :printhex8
               .mv dsdi, :data_at
               cal :printstr
               pop ci
               pop cs
               cal :printhex16
               kil
data_fatal:    .db 'fatal '
data_error:    .db 'error ', 0x00
data_at:       .db ' at ', 0x00
sys_stackhead: nop
