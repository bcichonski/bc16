;
                .org 0x0f00
;MAIN ENTRYPOINT
;&STACKHEAD <- STACKHEAD + 2
                .mv dsdi, :sys_stackhead
                mov cs, 0x00
                mov ci, 0x02
                cal :add16
                .mv dsdi, :sys_stackhead
                cal :poke16
;&HEAPHEAD <- 12032
                .mv dsdi, :sys_heaphead
                mov cs, 0x2f
                mov ci, 0x00
                cal :poke16
                cal :FMAIN001b
                ret
;FUNCTIONS
;FUNCTION peek8
FPEEK80001:     nop
                mov a, 0x00
                cal :stackvar8gt16
                mov a, #csci
                mov cs, 0x00
                mov ci, a
                ret
;END OF FUNCTION peek8
;FUNCTION peek16
FPEEK160002:    nop
                mov a, 0x00
                cal :stackvar8gt16
                mov ds, cs
                mov di, ci
                cal :peek16
                ret
;END OF FUNCTION peek16
;FUNCTION poke8
FPOKE80003:     nop
                mov a, 0x02
                cal :stackvar8gt8
                mov a, ci
                psh a
                mov a, 0x00
                cal :stackvar8gt16
                pop a
                mov #csci, a
                ret
;END OF FUNCTION poke8
;FUNCTION poke16
FPOKE160004:    nop
                mov a, 0x00
                cal :stackvar8gt16
                psh cs
                psh ci
                mov a, 0x02
                cal :stackvar8gt16
                pop di
                pop ds
                cal :poke16
                ret
;END OF FUNCTION poke16
;FUNCTION parsedecw
FPARSEDECW0005: nop
                mov cs, 0x00
                mov ci, 0x00
            mov a, 0x03
            cal :stackvar8st16
LABEL0006:      nop
                mov a, 0x02
                cal :stackvar8gt8
                mov a, cs
                or ci
                .mv csci, :LABEL0007
                jmp z, csci
    ;depth 2: STACKHEAD += 6
                    mov a, 0x06
                    cal :stackheadrll8
                mov a, 0x86
                cal :stackvar8gt16
            mov a, 0x00
            cal :stackvar8st16
                cal :FPEEK80001
    ;depth 1: STACKHEAD -= 6
                    mov a, 0x86
                    cal :stackheadrll8
            mov a, 0x05
            cal :stackvar8st8
                mov a, 0x05
                cal :stackvar8gt8
                mov a, cs
                or  ci
                mov a, f
                and 0x01
                mov cs,0x00
                mov ci, a
                mov a, cs
                or ci
                .mv csci, :LABEL0008
                jmp z, csci
                mov cs, 0x00
                mov ci, 0x01
            mov a, 0x02
            cal :stackvar8st8
LABEL0008:      nop
                mov a, 0x05
                cal :stackvar8gt8
                mov a, cs
                or ci
                .mv csci, :LABEL0009
                jmp z, csci
                mov a, 0x05
                cal :stackvar8gt8
                psh cs
                psh ci
                mov cs, 0x00
                mov ci, 0x30
                mov ds, cs
                mov di, ci
                pop ci
                pop cs
                cal :sub16
            mov a, 0x05
            cal :stackvar8st8
                mov a, 0x03
                cal :stackvar8gt16
                psh cs
                psh ci
                mov cs, 0x00
                mov ci, 0x0a
                mov ds, cs
                mov di, ci
                pop ci
                pop cs
                cal :mul16
                psh cs
                psh ci
                mov a, 0x05
                cal :stackvar8gt8
                mov ds, cs
                mov di, ci
                pop ci
                pop cs
                cal :add16
            mov a, 0x03
            cal :stackvar8st16
LABEL0009:      nop
                mov a, 0x00
                cal :stackvar8gt16
                psh cs
                psh ci
                mov cs, 0x00
                mov ci, 0x01
                mov ds, cs
                mov di, ci
                pop ci
                pop cs
                cal :add16
            mov a, 0x00
            cal :stackvar8st16
                mov a, 0x02
                cal :stackvar8gt8
                psh cs
                psh ci
                mov cs, 0x00
                mov ci, 0x01
                mov ds, cs
                mov di, ci
                pop ci
                pop cs
                cal :sub16
            mov a, 0x02
            cal :stackvar8st8
                .mv csci, :LABEL0006
                xor a
                jmp z, csci
LABEL0007:      nop
                mov a, 0x03
                cal :stackvar8gt16
                ret
                ret
;END OF FUNCTION parsedecw
;FUNCTION putdigit
FPUTDIGIT000a:  nop
                mov a, 0x00
                cal :stackvar8gt8
                mov a, ci
                cal :printhex4
                ret
;END OF FUNCTION putdigit
;FUNCTION putb
FPUTB000b:      nop
                mov a, 0x00
                cal :stackvar8gt8
                mov a, ci
                cal :printhex8
                ret
;END OF FUNCTION putb
;FUNCTION putw
FPUTW000c:      nop
                mov a, 0x00
                cal :stackvar8gt16
                cal :printhex16
                ret
;END OF FUNCTION putw
;FUNCTION putwnl
FPUTWNL000d:    nop
                mov a, 0x00
                cal :stackvar8gt16
                cal :printhex16
                cal :print_newline
                ret
;END OF FUNCTION putwnl
;FUNCTION putnl
FPUTNL000e:     nop
                cal :print_newline
                ret
;END OF FUNCTION putnl
;FUNCTION puts
FPUTS000f:      nop
                mov a, 0x00
                cal :stackvar8gt16
                mov ds, cs
                mov di, ci
                cal :printstr
                ret
;END OF FUNCTION puts
;FUNCTION putsnl
FPUTSNL0010:    nop
                mov a, 0x00
                cal :stackvar8gt16
                mov ds, cs
                mov di, ci
                cal :printstr
                cal :print_newline
                ret
;END OF FUNCTION putsnl
;FUNCTION readsn
FREADSN0011:    nop
                mov a, 0x00
                cal :stackvar8gt16
                psh cs
                psh ci
                mov a, 0x02
                cal :stackvar8gt8
                pop di
                pop ds
                cal :readstr
                ret
;END OF FUNCTION readsn
;FUNCTION putdecw
FPUTDECW0012:   nop
                mov cs, 0x27
                mov ci, 0x10
            mov a, 0x03
            cal :stackvar8st16
                mov cs, 0x00
                mov ci, 0x00
            mov a, 0x05
            cal :stackvar8st8
LABEL0013:      nop
                mov a, 0x03
                cal :stackvar8gt16
                mov a, cs
                or ci
                .mv csci, :LABEL0014
                jmp z, csci
                mov a, 0x00
                cal :stackvar8gt16
                psh cs
                psh ci
                mov a, 0x03
                cal :stackvar8gt16
                mov ds, cs
                mov di, ci
                pop ci
                pop cs
                cal :div16
            mov a, 0x02
            cal :stackvar8st8
                mov a, 0x00
                cal :stackvar8gt16
                psh cs
                psh ci
                mov a, 0x02
                cal :stackvar8gt8
                psh cs
                psh ci
                mov a, 0x03
                cal :stackvar8gt16
                mov ds, cs
                mov di, ci
                pop ci
                pop cs
                cal :mul16
                mov ds, cs
                mov di, ci
                pop ci
                pop cs
                cal :sub16
            mov a, 0x00
            cal :stackvar8st16
                mov a, 0x02
                cal :stackvar8gt8
                psh cs
                psh ci
                mov a, 0x03
                cal :stackvar8gt16
                psh cs
                psh ci
                mov cs, 0x00
                mov ci, 0x01
                mov ds, cs
                mov di, ci
                pop ci
                pop cs
                cal :eq16
                mov cs, 0x00
                mov ci, a
                mov ds, cs
                mov di, ci
                pop ci
                pop cs
                cal :add16
                mov a, cs
                or ci
                .mv csci, :LABEL0015
                jmp z, csci
                mov cs, 0x00
                mov ci, 0x01
            mov a, 0x05
            cal :stackvar8st8
LABEL0015:      nop
                mov a, 0x05
                cal :stackvar8gt8
                mov a, cs
                or ci
                .mv csci, :LABEL0016
                jmp z, csci
    ;depth 2: STACKHEAD += 6
                    mov a, 0x06
                    cal :stackheadrll8
                mov a, 0x84
                cal :stackvar8gt8
            mov a, 0x00
            cal :stackvar8st8
                cal :FPUTDIGIT000a
    ;depth 1: STACKHEAD -= 6
                    mov a, 0x86
                    cal :stackheadrll8
LABEL0016:      nop
                mov a, 0x03
                cal :stackvar8gt16
                psh cs
                psh ci
                mov cs, 0x00
                mov ci, 0x0a
                mov ds, cs
                mov di, ci
                pop ci
                pop cs
                cal :div16
            mov a, 0x03
            cal :stackvar8st16
                .mv csci, :LABEL0013
                xor a
                jmp z, csci
LABEL0014:      nop
                ret
;END OF FUNCTION putdecw
;FUNCTION putdecwnl
FPUTDECWNL0017: nop
    ;depth 2: STACKHEAD += 2
                    mov a, 0x02
                    cal :stackheadrll8
                mov a, 0x82
                cal :stackvar8gt16
            mov a, 0x00
            cal :stackvar8st16
                cal :FPUTDECW0012
    ;depth 1: STACKHEAD -= 2
                    mov a, 0x82
                    cal :stackheadrll8
                cal :print_newline
                ret
;END OF FUNCTION putdecwnl
;FUNCTION strnextword
FSTRNEXTWOR0018:nop
                mov a, 0x00
                cal :stackvar8gt16
                mov ds, cs
                mov di, ci
                cal :nextword
                jmr nz,:strnnextw
                mov ds, 0x00
                mov di, 0x00
                strnnextw: mov cs, ds
                mov ci, di
                ret
;END OF FUNCTION strnextword
;FUNCTION strnlen8
FSTRNLEN80019:  nop
                mov a, 0x00
                cal :stackvar8gt16
                psh cs
                psh ci
                mov a, 0x02
                cal :stackvar8gt8
                mov cs, ci
                pop di
                pop ds
                cal :str_len8
                mov cs, 0x00
                ret
;END OF FUNCTION strnlen8
;FUNCTION strcpy
FSTRCPY001a:    nop
                mov a, 0x00
                cal :stackvar8gt16
                psh cs
                psh ci
                mov a, 0x02
                cal :stackvar8gt16
                pop di
                pop ds
                cal :str_cpy
                ret
;END OF FUNCTION strcpy
;FUNCTION main
FMAIN001b:      nop
                .mv csci, :DATA001c
            mov a, 0x00
            cal :stackvar8st16
                cal :FPUTS000f
                kil
                ret
;END OF FUNCTION main
;>>>>>>>>>>DATA SEGMENT<<<<<<<<<<<<<
DATA001c:      .db 'bdos 1.0 shell', 0x00
;>>>>>>>>>>COMPILER ASM STDLIB for BCOS v1.0 on BC16 v1.0<<<<<<<<<<<<<
            mov a, 0xff
            mov a, 0xff
            mov a, 0xff
            mov a, 0xff
;=============
; OS_METACALL(a) - calls given bcos subroutine indirectly
;           - other registers as required
; OUT:      - as returned
            .def os_metacall, 0x0008
;=============
; FATAL(a) - prints error message and stops
; IN:   a - error code
;   stack - as error address
; OUT:  KILL, messed stack
            .def fatal, 0x04ea
;=============
; PRINTHEX4(a) - prints hex number from 0 to f
; IN:    a - number to print
; OUT:   a - unchanged      10 -> 0 -> 41
;       cs - set to 1
            .def printhex4, 0x0349
;=============
; PRINTHEX8(a) - prints hex number 
; IN:    a - number to print
; OUT:   a - set to lower half
;     csci - unchanged
;     dsdi - unchanged
printhex8:      psh ci
                mov ci, 0x04
                psh ci
                pop f
                pop ci
                cal :os_metacall
                ret  
;=============
; PRINTHEX16(csci) - prints hex number 4 digits
; IN:    csci - hex number 4 digits
; OUT:   csci - unchanged
;           a - ci
printhex16:     mov a, 0x05
                psh a
                pop f
                cal :os_metacall
                ret 
;=============
; INC16(dsdi) - increase 16bit number correctly
; IN:    dsdi - number 16bit, break if exceeds 16bit
; OUT:   dsdi - add 1
;           a - di + 1 or ds + 1
inc16:          mov a, 0x06
                psh a
                pop f
                cal :os_metacall
                ret 
;=============
; DEC16(dsdi) - decrease 16bit number correctly
; IN:    dsdi - number 16bit, break if lower than 0
; OUT:   dsdi - sub 1
;           a - di - 1 or ds - 1
dec16:          mov a, 0x07
                psh a
                pop f
                cal :os_metacall
                ret  
;=============
; POKE16(#dsdi, csci) - stores csci value under #dsdi address (2 bytes)
; IN:   dsdi - address to store
;       csci - value to store
; OUT:  dsdi - address to store + 1
;       csci - unchanged
;       a    - rubbish
poke16:         mov a, 0x09
                psh a
                pop f
                cal :os_metacall
                ret          
;=============
; PEEK16(#dsdi) - returns value under dsdi address (2 bytes)
; IN:   dsdi - address to read
; OUT:  dsdi - address to read + 1
;       csci - value
;       a    - rubbish
peek16:         mov a, 0x0a
                psh a
                pop f
                cal :os_metacall
                ret
;=============
; ADD16(csci,dsdi) - returns value
;                    return os error 0x12 in case of overflow                
; IN:   csci - argument 1
;       dsdi - argument 2
; OUT:  csci - sum of csci and dsdi
;       a    - rubbish
add16:          mov a, 0x0b
                psh a
                pop f
                cal :os_metacall
                ret
;=============
; SUB16(csci,dsdi) - returns value 
;                    return os error 0x13 in case of overflow                
; IN:   csci - argument 1
;       dsdi - argument 2
; OUT:  csci - substracts dsdi from csci
;       a    - rubbish
sub16:          mov a, 0x0c
                psh a
                pop f
                cal :os_metacall
                ret
;=============
; MUL16(csci,dsdi) - returns value 
;                    return os error 0x12 in case of overflow                
; IN:   csci - argument 1
;       dsdi - argument 2
; OUT:  csci - mutiplies csci by dsdi
;       dsdi - unchanged
;       a    - rubbish
mul16:          mov a, 0x1f
                psh a
                pop f
                cal :os_metacall
                ret
;=============
; DIV16(csci,dsdi) - returns value 
;                    return os error 0x13 in case of overflow                
; IN:   csci - argument 1
;       dsdi - argument 2
; OUT:  csci - divides csci by dsdi
;       dsdi - unchanged
;       a    - rubbish
div16:          mov a, 0x20
                psh a
                pop f
                cal :os_metacall
                ret
;=============
; READSTR(#dsdi, ci) - reads characters to the buffer
; IN:   dsdi - buffer address for chars
;         ci - length of the buffer (since last char has to be 0x00 we can enter one less)
; OUT:  dsdi - preserved
;         ci - preserved
;         cs - how many chars can we could still add
            .def readstr, 0x03f6
;=============
; NEXTWORD(dsdi) - moves to the end of current word
; IN:     dsdi - char buffer address
; OUT:    dsdi - address of the next word or end of buffer
;            a - >0 if next word exist
            .def nextword, 0x04b4
;=============
; NEXTVAL8(dsdi) - moves until expected value
; IN:     dsdi - char buffer address
;           ci - expected 8bit value
;           cs - max length to check
; OUT:    dsdi - address of the next byte or end of buffer
;           cs - how much was left to end of buffer
;           ci - unchanged
;            a - >0 if value was found
            .def nextval8, 0x04d1
;=============
; STR_CPY(csci,dsdi)  - copy string from dsdi to csci
; IN: dsdi - source  
;     csci - desc
; OUT: dsdi = source + length + 1
            .def str_cpy, 0x0562
;=============
; STR_LEN8(dsdi)  - length of the string ending with 0x00
; IN: dsdi - source  
;     cs   - max length
; OUT: dsdi - preserved, cs = rubbish, ci = actual length
            .def str_len8, 0x0581
;=============
; PARSEHEX4(#dsdi) - parses single char to hex number chars 0-9 and a-z and A-Z are supported
; IN:   dsdi - buffer address for char-hex
; OUT:     a - 0 if ok, 0xff if parse error
;         ci - hexval of a char
            .def parsehex4, 0x0448
;=============
; PARSEHEX8(#dsdi) - parses two char to hex number
; IN:   dsdi - buffer address for char
; OUT:    a - success = 0 or >0 error
;        ci - hex value for byte
;      dsdi - moved + 2 if ok
            .def parsehex8, 0x0476
;=============
; PARSEHEX16(#dsdi) - parses four char to hex number
; IN:   dsdi - buffer address for char
; OUT:  csci - hex value for value
;          a - success = 0 or error code
;       dsdi - moved + 4 if ok
            .def parsehex16, 0x0497
;=============
; PRINT_NEWLINE - prints new line
; IN:
; OUT:   a - rubbish
print_newline:  mov a, 0x00
                psh a
                pop f
                cal :os_metacall
                ret
;=============
; PRINTSTR(*dsdi) - sends chars to printer
; IN: dsdi - address of 0-ended char table
; OUT:   a - set to 0x00
;       ci - set to 0x01
;     dsdi - set to end of char table
printstr:       mov a, 0x02
                psh a
                pop f
                cal :os_metacall
                ret
;=============
; GT16(csci,dsdi) - compares csci with dsdi            
; IN:   csci - argument 1
;       dsdi - argument 2
; OUT:  a - 1 if csci > dsdi
;       a - 0 otherwise
gt16:           mov a, 0x21
                psh a
                pop f
                cal :os_metacall
                ret
;=============
; GTEQ16(csci,dsdi) - compares csci with dsdi            
; IN:   csci - argument 1
;       dsdi - argument 2
; OUT:  a - 1 if csci >= dsdi
;       a - 0 otherwise
gteq16:         mov a, 0x22
                psh a
                pop f
                cal :os_metacall
                ret
;=============
; EQ16(csci,dsdi) - compares csci with dsdi            
; IN:   csci - argument 1
;       dsdi - argument 2
; OUT:  a - 1 if csci == dsdi
;       a - 0 otherwise
eq16:           mov a, 0x23
                psh a
                pop f
                cal :os_metacall
                ret
;=============
; STACKOFFSCALC(csci,a) - modifies SYS_STACKHEAD by csci and stores new value back in csci
; IN: csci - value to increase
;        a - 0x00 - add
;            0x01 - sub
; OUT:csci - value of SYS_STACKHEAD with offset
;     dsdi - address of SYS_STACKHEAD
;        a - rubbish
stackoffscalc: psh a
               psh cs
               psh ci
               .mv dsdi, :sys_stackhead
               cal :peek16
               pop di
               pop ds
               pop a
               and a
               jmr nz, :stoffclc_sub
               cal :add16
               xor a
               jmr z, :stoffclc_end
stoffclc_sub:  cal :sub16  
stoffclc_end:  .mv dsdi, :sys_stackhead
               ret
;=============
; STACKOFFSCLC8(a) - modifies SYS_STACKHEAD by a and stores new value back in csci, if a > 128 then this is to be substracted
; IN:    a - value to increase
;        a - 0x00 - add
;            0x80 - sub
; OUT:csci - value of SYS_STACKHEAD with offset
;     dsdi - address of SYS_STACKHEAD
;        a - rubbish
stackoffsclc8: psh a
               psh a
               .mv dsdi, :sys_stackhead
               cal :peek16
               pop a
               and 0x80
               jmr nz, :stoffcl8_sub
               mov ds, 0x00
               pop di
               cal :add16
               xor a
               jmr z, :stoffcl8_end
stoffcl8_sub:  pop a
               and 0x7f
               mov di, a
               mov ds, 0x00
               cal :sub16  
stoffcl8_end:  .mv dsdi, :sys_stackhead
               ret
;=============
; STACKHEADROLL(csci, a) - modifies SYS_STACKHEAD by csci and saves new value
; IN: csci - value to increase
;        a - 0x00 - add
;            0x01 - sub
; OUT:csci - value of SYS_STACKHEAD
;     dsdi - address of SYS_STACKHEAD
;        a - rubbish
stackheadroll: cal :stackoffscalc
               cal :poke16
               .mv dsdi, :sys_stackhead
               ret
;=============
; STACKHEADRLL8(a) - modifies SYS_STACKHEAD by csci and saves new value
; IN:    a - value to increase
;        a - 0x00 - add
;            0x80 - sub
; OUT:csci - value of SYS_STACKHEAD
;     dsdi - address of SYS_STACKHEAD
;        a - rubbish
stackheadrll8: psh cs
               psh ci
               cal :stackoffsclc8
               cal :poke16
               .mv dsdi, :sys_stackhead
               pop ci
               pop cs
               ret
;=============
; STACKVARGET8(dsdi, a) - loads value of the variable of given offset dsdi from SYS_STACKHEAD to csci
; IN: dsdi - offset from SYS_STACKHEAD
;        a - 0x00 - add
;            0x01 - sub
; OUT:ci - value of variable
;     cs - set to 0
;     dsdi - address of SYS_STACKHEAD
;        a - rubbish
stackvarget8:  mov cs, ds
               mov ci, di
               cal :stackoffscalc   
               mov a, #csci
               mov cs, 0x00
               mov ci, a
               ret
;=============
; STACKVARGET16(dsdi, a) - loads value of the variable of given offset dsdi from SYS_STACKHEAD to csci
; IN: dsdi - offset from SYS_STACKHEAD
;        a - 0x00 - add
;            0x01 - sub
; OUT:csci - value of variable
;     dsdi - address of variable + 1
;        a - rubbish
stackvarget16: mov cs, ds
               mov ci, di
               cal :stackoffscalc
               mov ds, cs
               mov di, ci   
               cal :peek16
               ret
;=============
; STACKVARSET8(ci,dsdi, a) - loads value of the variable of given offset from SYS_STACKHEAD to csci
; IN: ci - value
;     dsdi - offset from SYS_STACKHEAD
;        a - 0x00 - add
;            0x01 - sub
; OUT:csci - value of variable
;     dsdi - address of SYS_STACKHEAD
;        a - ci
stackvarset8:  psh ci
               mov cs, ds
               mov ci, di
               cal :stackoffscalc   
               pop a
               mov #csci, a
               ret
;=============
; STACKVARSET16(csci,dsdi, a) - loads value of the variable of given offset from SYS_STACKHEAD to csci
; IN: csci - value
;     dsdi - offset from SYS_STACKHEAD
;        a - 0x00 - add
;            0x01 - sub
; OUT:csci - value
;     dsdi - address of variable + 1
;        a - ci
stackvarset16: psh cs
               psh ci
               mov cs, ds
               mov ci, di
               cal :stackoffscalc   
               mov ds, cs
               mov di, ci
               pop ci
               pop cs
               cal :poke16
               ret
;=============
; STACKVAR8GT8(a) - loads value of the variable of given offset a from SYS_STACKHEAD to csci
; IN:    a - offset from SYS_STACKHEAD
;        a - 0x00 - add
;            0x80 - sub
; OUT:  ci - value of variable
;       cs - set to 0
;     dsdi - address of SYS_STACKHEAD
;        a - same as ci
stackvar8gt8:  cal :stackoffsclc8   
               mov a, #csci
               mov cs, 0x00
               mov ci, a
               ret
;=============
; STACKVAR8GT16(a) - loads value of the variable of given offset a from SYS_STACKHEAD to csci
; IN:    a - offset from SYS_STACKHEAD
;        a - 0x00 - add
;            0x80 - sub
; OUT:csci - value of variable
;     dsdi - address of variable + 1
;        a - rubbish
stackvar8gt16: cal :stackoffsclc8
               mov ds, cs
               mov di, ci   
               cal :peek16
               ret
;=============
; STACKVAR8ST8(ci, a) - loads value of the variable of given offset from SYS_STACKHEAD to csci
; IN: ci - value
;        a - offset from SYS_STACKHEAD
;        a - 0x00 - add
;            0x80 - sub
; OUT:  ci - value of variable
;     dsdi - address of SYS_STACKHEAD
;        a - ci
stackvar8st8:  psh ci
               cal :stackoffsclc8   
               pop a
               mov #csci, a
               ret
;=============
; STACKVAR8ST16(csci,a) - loads value of the variable of given offset from SYS_STACKHEAD to csci
; IN: csci - value
;        a - offset from SYS_STACKHEAD
;        a - 0x00 - add
;            0x80 - sub
; OUT:csci - value
;     dsdi - address of variable + 1
;        a - rubbish
stackvar8st16: psh cs
               psh ci
               cal :stackoffsclc8   
               mov ds, cs
               mov di, ci
               pop ci
               pop cs
               cal :poke16
               ret
;=============
; MSEEK(csci) - finds address of first free block of given size
; IN: csci - wanted size of the block
; OUT:csci - address after which free memory begins
;     dsdi - address of the block after which is enough free memory
mseek:      .mv dsdi, :sys_seektmp
            cal :poke16
            .mv dsdi, :sys_heaphead
            cal :peek16
            mov ds, cs
            mov di, ci
mseek_loop: psh ds
            psh di
            cal :peek16
            psh cs
            psh ci
            cal :inc16
            cal :peek16
            pop f
            pop a
            psh cs
            psh ci
            psh a
            psh f
            cal :inc16           
            mov a, ci
            or cs
            jmr z, :mseek_end
            cal :sub16
            pop di
            pop ds
            cal :sub16
            psh cs
            psh ci
            .mv dsdi, :sys_seektmp
            cal :peek16
            mov ds, cs
            mov di, ci
            pop ci
            pop cs
            cal :gteq16
            jmr nz, :mseek_ret
            pop di
            pop ds
            pop a
            pop a
            xor a
            jmr z, :mseek_loop
mseek_end:  pop a
            pop a
            pop a
            pop a
            pop a
            pop a
            mov cs, ds
            mov ci, di            
            ret
mseek_ret:  pop di
            pop ds
            pop ci
            pop cs
            ret
;=============
; MFILL(csci,dsdi, a) - fills memory starting from dsdi for csci bytes of value a
; IN: csci - length
;     dsdi - address of memory
;        a - value to fill
mfill:      psh a
mfill_loop: mov a, cs
            or ci
            jmr z, :mfill_ret
            pop a
            psh a
            mov #dsdi, a
            cal :inc16
            psh ds
            psh di
            mov ds, cs
            mov di, ci
            cal :dec16
            mov cs, ds
            mov ci, di
            pop di
            pop ds
            xor a
            jmr z, :mfill_loop
mfill_ret:  pop a
            ret
; OUT:csci - address after which free memory begins
;     dsdi - address of the block after which is enough free memory
;=============
;SYS DATA
            .def var_promptbuf, 0x0bcf
            .def var_user_mem, 0x0bcb
sys_seektmp: .db 0x00, 0x00 
sys_heaphead:  .db 0x2f, 0x00
sys_stackhead: nop
