;
                .org 0x1000
;MAIN ENTRYPOINT
;&STACKHEAD <- STACKHEAD + 2
                .mv dsdi, :sys_stackhead
                mov cs, 0x00
                mov ci, 0x02
                cal :add16
                .mv dsdi, :sys_stackhead
                cal :poke16
;&HEAPHEAD <- 0
                .mv dsdi, :sys_heaphead
                mov cs, 0x00
                mov ci, 0x00
                cal :poke16
                cal :FMAIN0005
                kil
;FUNCTIONS
;FUNCTION putb
FPUTB0001:      nop
;STACKHEAD += 1
                psh cs
                psh ci
                .mv dsdi, :sys_stackhead
                cal :peek16
                mov ds, cs
                mov di, ci
                mov cs, 0x00
                mov ci, 0x01
                cal :add16
                .mv dsdi, :sys_stackhead
                cal :poke16
                pop ci
                pop cs
                .mv dsdi,:sys_stackhead
                cal :peek16
                mov ds, 0x00
                mov di, 0x01
                cal :sub16
                mov ds, cs
                mov di, ci
                    mov cs, 0x00
                    mov ci, #dsdi
                mov a, ci
                cal :printhex8
                mov cs, 0x00
                mov ci, 0x00
;STACKHEAD -= 1
                psh cs
                psh ci
                .mv dsdi, :sys_stackhead
                cal :peek16
                mov ds, 0x00
                mov di, 0x01
                cal :sub16
                .mv dsdi, :sys_stackhead
                cal :poke16
                pop ci
                pop cs
                ret
                ret
;END OF FUNCTION putb
;FUNCTION putw
FPUTW0002:      nop
;STACKHEAD += 2
                psh cs
                psh ci
                .mv dsdi, :sys_stackhead
                cal :peek16
                mov ds, cs
                mov di, ci
                mov cs, 0x00
                mov ci, 0x02
                cal :add16
                .mv dsdi, :sys_stackhead
                cal :poke16
                pop ci
                pop cs
                .mv dsdi,:sys_stackhead
                cal :peek16
                mov ds, 0x00
                mov di, 0x02
                cal :sub16
                mov ds, cs
                mov di, ci
                    cal :peek16
                cal :printhex16
                mov cs, 0x00
                mov ci, 0x00
;STACKHEAD -= 2
                psh cs
                psh ci
                .mv dsdi, :sys_stackhead
                cal :peek16
                mov ds, 0x00
                mov di, 0x02
                cal :sub16
                .mv dsdi, :sys_stackhead
                cal :poke16
                pop ci
                pop cs
                ret
                ret
;END OF FUNCTION putw
;FUNCTION putnl
FPUTNL0003:     nop
                cal :print_newline
                mov cs, 0x00
                mov ci, 0x00
                ret
                ret
;END OF FUNCTION putnl
;FUNCTION puts
FPUTS0004:      nop
;STACKHEAD += 2
                psh cs
                psh ci
                .mv dsdi, :sys_stackhead
                cal :peek16
                mov ds, cs
                mov di, ci
                mov cs, 0x00
                mov ci, 0x02
                cal :add16
                .mv dsdi, :sys_stackhead
                cal :poke16
                pop ci
                pop cs
;//result of this expression is value of Pstr in csci registers
                .mv dsdi,:sys_stackhead
                cal :peek16
                mov ds, 0x00
                mov di, 0x02
                cal :sub16
                mov ds, cs
                mov di, ci
                    cal :peek16
                mov ds, cs
                mov di, ci
                cal :printstr
                mov cs, 0x00
                mov ci, 0x00
;STACKHEAD -= 2
                psh cs
                psh ci
                .mv dsdi, :sys_stackhead
                cal :peek16
                mov ds, 0x00
                mov di, 0x02
                cal :sub16
                .mv dsdi, :sys_stackhead
                cal :poke16
                pop ci
                pop cs
                ret
                ret
;END OF FUNCTION puts
;FUNCTION main
FMAIN0005:      nop
;Pstr offset zero
                .mv dsdi, :sys_stackhead
                cal :peek16
                psh cs
                psh ci
                .mv csci, :DATA0006
                pop di
                pop ds
                cal :poke16
                cal :FPUTS0004
                cal :FPUTNL0003
;value offset zero
                .mv dsdi, :sys_stackhead
                cal :peek16
                psh cs
                psh ci
                mov cs, 0x00
                mov ci, 0xff
                pop di
                pop ds
                mov #dsdi, ci
                cal :FPUTB0001
                cal :FPUTNL0003
;value offset zero
                .mv dsdi, :sys_stackhead
                cal :peek16
                psh cs
                psh ci
                mov cs, 0xab
                mov ci, 0xcd
                pop di
                pop ds
                cal :poke16
                cal :FPUTW0002
                mov cs, 0x00
                mov ci, 0x00
                ret
                ret
;END OF FUNCTION main
;>>>>>>>>>>DATA SEGMENT<<<<<<<<<<<<<
DATA0006:      .db 'hello world', 0x00
;>>>>>>>>>>COMPILER ASM LIB - BCOS 1.0<<<<<<<<<<<<<
            mov a, 0xff
            mov a, 0xff
            mov a, 0xff
            mov a, 0xff
;=============
; FATAL(a) - prints error message and stops
; IN:   a - error code
;   stack - as error address
; OUT:  KILL, messed stack
            .def fatal, 0x04ea
;=============
; PRINTHEX4(a) - prints hex number from 0 to f
; IN:    a - number to print
; OUT:   a - unchanged      10 -> 0 -> 41
;       cs - set to 1
            .def printhex4, 0x0349
;=============
; PRINTHEX8(a) - prints hex number 
; IN:    a - number to print
; OUT:   a - set to lower half
;     csci - unchanged
;     dsdi - unchanged
            .def printhex8, 0x035c
;=============
; PRINTHEX16(csci) - prints hex number 4 digits
; IN:    csci - hex number 4 digits
; OUT:   csci - unchanged
;           a - ci
            .def printhex16, 0x036f
;=============
; INC16(dsdi) - increase 16bit number correctly
; IN:    dsdi - number 16bit, break if exceeds 16bit
; OUT:   dsdi - add 1
;           a - di + 1 or ds + 1
            .def inc16, 0x037a
;=============
; DEC16(dsdi) - decrease 16bit number correctly
; IN:    dsdi - number 16bit, break if lower than 0
; OUT:   dsdi - sub 1
;           a - di - 1 or ds - 1
            .def dec16, 0x038f
;=============
; POKE16(#dsdi, csci) - stores csci value under #dsdi address (2 bytes)
; IN:   dsdi - address to store
;       csci - value to store
; OUT:  dsdi - address to store + 1
;       csci - unchanged
;       a    - rubbish
            .def poke16, 0x03b0            
;=============
; PEEK16(#dsdi) - returns value under dsdi address (2 bytes)
; IN:   dsdi - address to read
; OUT:  dsdi - address to read + 1
;       csci - value
;       a    - rubbish
            .def peek16, 0x03b8
;=============
; ADD16(csci,dsdi) - returns value under csci address (2 bytes) 
;                    return os error 0x10 in case of overflow                
; IN:   csci - argument 1
;       dsdi - argument 2
; OUT:  csci - sum of csci and dsdi
;       a    - rubbish
            .def add16, 0x03c0
;=============
; SUB16(csci,dsdi) - returns value under csci address (2 bytes) 
;                    return os error 0x11 in case of overflow                
; IN:   csci - argument 1
;       dsdi - argument 2
; OUT:  csci - substracts dsdi from csci
;       a    - rubbish
            .def sub16, 0x03db
;=============
; PRINT_NEWLINE - prints new line
; IN:
; OUT:   a - rubbish
            .def print_newline, 0x0323
;=============
; PRINTSTR(*dsdi) - sends chars to printer
; IN: dsdi - address of 0-ended char table
; OUT:   a - set to 0x00
;       ci - set to 0x01
;     dsdi - set to end of char table
            .def printstr, 0x0339
;=============
; GTEQ16(csci,dsdi) - compares csci with dsdi            
; IN:   csci - argument 1
;       dsdi - argument 2
; OUT:  a - 1 if csci >= dsdi
;       a - 0 otherwise
gteq16:        mov a, cs
            sub ds
            jmr o, :gteq16_false
            jmr nz, :gteq16_true
            mov a, ci
            sub di
            jmr o, :gteq16_false
            jmr nz, :gteq16_true
gteq16_true:   mov a, 0x01
            ret
gteq16_false:  xor a
            ret
;=============
; EQ16(csci,dsdi) - compares csci with dsdi            
; IN:   csci - argument 1
;       dsdi - argument 2
; OUT:  a - 1 if csci == dsdi
;       a - 0 otherwise
eq16:          mov a, cs
            sub ds
            jmr nz, :gteq16_false
            mov a, ci
            sub di
            jmr nz, :gteq16_false
eq16_true:     mov a, 0x01
            ret
eq16_false:    xor a
            ret
;=============
; MALLOC(csci) - allocates csci bytes on the program heap
; IN: csci - size of the block
; OUT:csci - address of the block
malloc:        psh cs
            psh ci
            .mv dsdi, :sys_heaphead
            cal :peek16
            ret
;=============
; SEEK(csci, dsdi) - finds address of first free block of given size
; IN: csci - wanted size of the block
; OUT:dsdi - address of the block after which is enough free memory
;     csci - address after which free memory begins
seek:          psh cs
            psh ci
            .mv dsdi, :sys_heaphead
            cal :peek16
            mov ds, cs
            mov di, ci
            psh cs
            psh ci
seek_loop:     cal :peek16
            mov a, ci
            xor cs
            jmr z, :seek_end
            cal :dec16
            cal :sub16
            pop di
            pop ds
            psh cs
            psh ci
            cal :inc16
            cal :inc16
            cal :peek16
            mov ds, cs
            mov di, ci
            pop ci
            pop cs
            cal :sub16
            pop di
            pop ds
            cal :gteq16
            jmr nz, :seek_end
;               ...
            jmr z, :seek_loop
seek_end:      pop di
            pop ds
            pop ci
            pop cs
            ret  
;=============
;SYS DATA
sys_heaphead:  .db 0x30, 0x00
sys_stackhead: nop
